#!/bin/sh
#
#
# ldmsd_aggregator This shell script takes care of starting and stopping
#                  ldmsd_aggregator (ovis data collection daemon).
#
# chkconfig: - 98 0
# description: ldmsd_aggregator is an ovis daemon.
#
### BEGIN INIT INFO
# Provides: ldmsd_aggregator
# Required-Start:
# Defalt-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Description: ldmsd_aggregator init script
### END INIT INFO

# Source function library.
if [ -f /lib/lsb/init-functions ] ; then
	. /lib/lsb/init-functions
	STATUS=status_of_proc
fi

if [ -f /etc/init.d/functions ] ; then
	. /etc/init.d/functions
	STATUS=status
else
	echo_success() {
		echo 'success'
	}
	echo_failure() {
		echo 'failure'
	}
fi

prefix=@prefix@
. $(sysconfdir)/profile.d/set-ovis-variables.sh
. $(sysconfdir)/ovis/ovis-functions.sh

if [ -z $OVIS_HOME ]; then
	OVIS_HOME=@prefix@
	echo "OVIS_HOME not defined, using default of $OVIS_HOME"
fi

if [ ! -d $OVIS_HOME ]; then
	echo "OVIS_HOME: $OVIS_HOME is not a directory"
	exit 1
fi

RETVAL=0
prog="ldmsd"
service="ldmsd_aggregator"
LDMSD_AGG=$OVIS_HOME/sbin/ldmsd

if [ -z $LDMSD_AGG_XPORT ] ; then
	LDMSD_AGG_XPORT=sock
	echo "LDMSD_AGG_XPORT not defined, using default of $LDMSD_AGG_XPORT"
fi
if [ -z $LDMSD_AGG_PORT_TO_OCMD ] ; then
	LDMSD_AGG_PORT_TO_OCMD=40002
	echo "LDMSD_AGG_PORT_TO_OCMD not defined, using default of $LDMSD_AGG_PORT_TO_OCMD"
fi
if [ -z $LDMSD_AGG_PORT_LISTEN ] ; then
	LDMSD_AGG_PORT_LISTEN=50002
	echo "LDMSD_AGG_PORT_LISTEN not defined, using default of $LDMSD_AGG_PORT_LISTEN"
fi

lockfile=$OVIS_HOME/var/lock/$prog.aggregator.lock
pidfile=$OVIS_HOME/var/pid/$prog.aggregator.pid

mkdir -p $(dirname $lockfile)
mkdir -p $(dirname $pidfile)
mkdir -p $OVIS_SOCK/
mkdir -p $OVIS_LOG/
LOG=$OVIS_LOG/ldmsd_aggregator.log
SOCK=$OVIS_SOCK/ldmsd_aggregator.ctrl

verify_sos() {
	if [ ! -d "$LDMSD_AGG_SOS" ]; then
		return 0
	fi
	for X in $LDMSD_AGG_SOS/*/; do
		sos_check_dir $X $LDMSD_STORE_RECOVER >>$LOG 2>&1
		if [ 0 -ne $? ]; then
			return 1
		fi
	done
	return 0
}

start() {
	echo -n "Starting $service: "
	# Check running instance
	pid=`ps -C ldmsd -opid,cmd | grep ldmsd_aggregator | sed 's/ *\([0-9]\+\) .*/\1/'`
	if [ $pid ] ; then
		echo -n "$service is already running: "
		echo_failure
		echo
		exit 1
	fi

	rm -f $SOCK

	verify_sos

	if [ $? -ne 0 ]; then
		echo_failure
		echo
		echo "SOS verify failed"
		if [ -z "$LDMSD_STORE_RECOVER" ]; then
			echo "\$LDMSD_STORE_RECOVER env var is not set"
			echo "Please set it to 'reinit' or 'restore' for"
			echo "SOS recovery action."
		fi
		exit 1
	fi

	$LDMSD_AGG -l $LOG -S $SOCK -x $LDMSD_AGG_XPORT:$LDMSD_AGG_PORT_LISTEN -m $LDMSD_AGG_MEM -o $LDMSD_AGG_PORT_TO_OCMD -z ldmsd_aggregator

	RETVAL=$?
	if [ $RETVAL -eq 0 ] ; then
		sleep 1;
		ps -C ldmsd -opid,cmd | grep ldmsd_aggregator | sed 's/ *\([0-9]\+\) .*/\1/' > $pidfile
		pid=`cat $pidfile`
		if [ $pid ] && [ -d /proc/$pid ] ; then
			echo_success
			echo
		else
			echo_failure
			echo
		fi
	else
		echo_failure
		echo
	fi
}

stop() {
	echo -n "Stopping $service: "
	if [ -f $pidfile ]; then
		pid=`cat $pidfile`
	else
		echo "pidfile of $pidfile doesn't exists, using ps"
		pid=`ps -C ldmsd -opid,cmd | grep ldmsd_aggregator | sed 's/ *\([0-9]\+\) .*/\1/'`
	fi

	if [ ! $pid ]; then
		echo "Cannot obtain ldmsd_aggregator pid ..."
		echo_failure
		echo
		return
	else
		kill $pid
	fi

	COUNT=$((4*10))
	while [ -d /proc/$pid ] && [ $COUNT -gt 0 ]; do
		sleep 0.25
		COUNT=$((COUNT-1))
	done

	if ps -p $pid >/dev/null 2>&1 ; then
		echo_failure
	else
		echo_success
		rm -f $lockfile
		rm -f $pidfile
		echo
	fi
}

dostatus() {
	$STATUS -p $pidfile $LDMSD_AGG $service
}

restart() {
	stop
	start
}

# See how we were called.
case "$1" in
  start)
	start
	;;
  stop)
	stop
	;;
  status)
	dostatus
	;;
  restart|reload)
	restart
	;;
  *)
	echo "Usage: $0 {start|stop|status}"
	exit 3
esac

exit $RETVAL
