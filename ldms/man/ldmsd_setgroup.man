.\" Manpage for ldmsd_setgroup
.\" Contact ovis-help@ca.sandia.gov to correct errors or typos.
.TH man 7 "5 Jul 2018" "v4.1" "LDMSD Set Group man page"

.\""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""/.
.SH NAME
ldmsd_setgroup - explanation, configuration, and commands for ldmsd set group


.\""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""/.
.SH SYNOPSIS

.nh   \" no hyphenation
.ad l \"left justified

.IP \fBsetgroup_add\fR 13
.RI "name=" GROUP_NAME " [producer=" PRODUCER "] [interval=" USEC "]"
.RI "[offset=" USEC "]"

.IP \fBsetgroup_mod\fR 13
.RI "name=" GROUP_NAME " [interval=" USEC "] [offset=" USEC "]"

.IP \fBsetgroup_del\fR
.RI "name=" GROUP_NAME

.IP \fBsetgroup_ins\fR
.RI "name=" GROUP_NAME " instance=" COMMA_SEPARATED_LIST_OF_INSTANCES

.IP \fBsetgroup_rm\fR
.RI "name=" GROUP_NAME " instance=" COMMA_SEPARATED_LIST_OF_INSTANCES

.hy 14 \" default hyphenation
.ad    \" restore text justification

.\""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""/.
.SH DESCRIPTION

An \fBldmsd setgroup\fR (referred to as \fBsetgroup\fR for short) is an
\fBldms_set\fR with special information for LDMS daemon (\fBldmsd\fR). The
setgroup information contains a list of other sets so that the LDMSD \fBupdtr\fR
can update all the sets in the collection at once (iteratively). This will help
administrators in configuration, and help sampler plugin developer to manage
their collection of sets. For an example usage of `ldmsd_group_*` APIs, please
see \fBgrptest.c\fR, and `ldmsd_group_*()` declarations (with doxygen doc) in
\fBldmsd.h\fR. In this manual page, we will focus on LDMSD commands that manage
the setgroup from the configuration side. The description for each command and
its parameters is as follows.

\fBsetgroup_add\fR adds (creates) a new setgroup. The following list describes
the command parameters:
.RS
.IP \fBname\fR=\fIGROUP_NAME
The name of the setgroup.
.IP \fB[producer\fR=\fIPRODUCER\fB]
(Optional) The producer name of the setgroup. If not set, the name of the LDMSD
(the \fB-n\fR option) is used.
.IP \fB[interval\fR=\fIUSEC\fB]
(Optional) The micro-second update interval hint.
.IP \fB[offset\fR=\fIUSEC\fB]
(Optional) The micro-second update offset hint.
.RE

\fBsetgroup_mod\fR modifies (mutable) attributes of the setgroup. The list of
parameters is as follows:
.RS
.IP \fBname\fR=\fIGROUP_NAME
The name of the setgroup.
.IP \fB[interval\fR=\fIUSEC\fB]
(Optional) The micro-second update interval hint.
.IP \fB[offset\fR=\fIUSEC\fB]
(Optional) The micro-second update offset hint.
.RE

\fBsetgroup_ins\fR inserts a list of set instances into the setgroup.
.RS
.IP \fBname\fR=\fIGROUP_NAME
The name of the setgroup.
.IP \fBinstance\fR=\fICOMMA_SEPARATED_LIST_OF_INSTANCES\fB
A comma-separated list of set instances.
.RE

\fBsetgroup_rm\fR removes a list of set instances from the setgroup.
.RS
.IP \fBname\fR=\fIGROUP_NAME
The name of the setgroup.
.IP \fBinstance\fR=\fICOMMA_SEPARATED_LIST_OF_INSTANCES\fB
A comma-separated list of set instances.
.RE

\fBsetgroup_del\fR deletes the setgroup.
.RS
.IP \fBname\fR=\fIGROUP_NAME
The name of the setgroup.
.RE

.SH EXAMPLE

In this example, we will have 2 \fBldmsd\fR's, namely \fBsampler\fR and
\fBaggregator\fR for the sampler daemon and the aggregator daemon respectively.
The sampler will have `meminfo`, `set_0`, `set_1`, `set_2`, `set_3` as its
regular sets. `thegroup` will be the setgroup created in the sampler that
contains `meminfo` and `set_0`. The aggregator will be setup to update only
`thegroup`.

.EX
.B
### sampler.conf
# It is OK to add the group first, please also not that our group has no
# update hint so that the updater in the aggregator can control its update
# interval.
setgroup_add name=thegroup

# Insert meminfo and set_0 into the group
setgroup_ins name=thegroup instance=meminfo,set_0

# test_sampler will generate a bunch of sets, with this config it will create
# set_0, set_1, set_2, set_3
load name=test_sampler
config name=test_sampler producer=sampler \\
       action=default \\
       base=set \\
       num_sets=4 \\
       push=0
start name=test_sampler interval=1000000 offset=0
# meminfo
load name=meminfo
config name=meminfo producer=sampler \\
       instance=meminfo
start name=meminfo interval=1000000 offset=0
### END OF sampler.conf

.B
### aggregator.conf
# Normal producer setup
prdcr_add name=prdcr host=localhost port=10001 xprt=sock \\
          interval=1000000 \\
          type=active
prdcr_start name=prdcr
# Setup the `grp_updtr` so that it only updates `thegroup`.
updtr_add name=grp_updtr interval=1000000 offset=500000
updtr_match_add name=grp_updtr regex=thegroup
updtr_prdcr_add name=grp_updtr regex=prdcr
updtr_start name=grp_updtr
### END OF sampler.conf
.EE

The daemons can be started with the following commands:
.EX
# For sampler, foreground start
$ ldmsd -F -c sampler.conf -x sock:10001
# For aggregator, foreground start
$ ldmsd -F -c aggregator.conf -x sock:10000
.EE

When listing the sets on the aggregator with \fB-v\fR option, you'll see that
only `meminfo` and `set_0` are recent. `thegroup` is only updated when its
information changed. The rest of the sets only been looked-up, but not updated.

.EX
$ ldms_ls -x sock -p 10000 -v | grep update
thegroup: consistent, last update: Thu Jul 05 16:22:08 2018 [303411us]
set_3: inconsistent, last update: Wed Dec 31 18:00:00 1969 [0us]
set_2: inconsistent, last update: Wed Dec 31 18:00:00 1969 [0us]
set_1: inconsistent, last update: Wed Dec 31 18:00:00 1969 [0us]
set_0: consistent, last update: Thu Jul 05 16:36:30 2018 [1793us]
meminfo: consistent, last update: Thu Jul 05 16:36:31 2018 [1946us]
.EE


While when listing the sets on the sampler, we will see all of them being
updated (except `thegroup`).

.EX
thegroup: consistent, last update: Thu Jul 05 16:22:08 2018 [303411us]
set_3: consistent, last update: Thu Jul 05 16:39:52 2018 [1915us]
set_2: consistent, last update: Thu Jul 05 16:39:52 2018 [1916us]
set_1: consistent, last update: Thu Jul 05 16:39:53 2018 [1948us]
set_0: consistent, last update: Thu Jul 05 16:39:53 2018 [1948us]
meminfo: consistent, last update: Thu Jul 05 16:39:53 2018 [2022us]
.EE

\fBRemoving/inserting\fR instances from/into the group can also be done
interactively via \fBldmsd_controller\fR. If we do the following on the
\fBsampler\fR:
.EX
$ ldmsd_controller --port 10001
Welcome to the LDMSD control processor
sock:localhost:10001> setgroup_rm name=thegroup instance=set_0
sock:localhost:10001> setgroup_ins name=thegroup instance=set_3
.EE

`set_0` will be removed from `thegroup`, and `set_3` will be added into
`thegroup`. Listing the sets on the \fBaggregator\fR will see that `set_0`
stopped being updated, and `set_3` becomes recent.

.EX
thegroup: consistent, last update: Thu Jul 05 16:42:12 2018 [378918us]
set_3: consistent, last update: Thu Jul 05 16:42:14 2018 [2070us]
set_2: inconsistent, last update: Wed Dec 31 18:00:00 1969 [0us]
set_1: inconsistent, last update: Wed Dec 31 18:00:00 1969 [0us]
set_0: consistent, last update: Thu Jul 05 16:41:25 2018 [1116us]
meminfo: consistent, last update: Thu Jul 05 16:42:15 2018 [1223us]
.EE

The \fBmembers\fR of the group can be \fBlisted\fR by the following:
.EX
$ ldms_ls -x sock -p 10000 -v thegroup
thegroup: consistent, last update: Thu Jul 05 16:42:12 2018 [378918us]
  APPLICATION SET INFORMATION ------
         grp_member: set_3 : -
         grp_member: meminfo : -
             ldmsd_grp_gn : 8
  METADATA --------
    Producer Name : a:10001
    Instance Name : thegroup
      Schema Name : ldmsd_grp_schema
             Size : 184
     Metric Count : 1
               GN : 1
             User : root(0)
            Group : root(0)
      Permissions : -rwxrwxrwx
  DATA ------------
        Timestamp : Thu Jul 05 16:42:12 2018 [378918us]
         Duration : [0.000017s]
       Consistent : TRUE
             Size : 64
               GN : 8
  -----------------
.EE
