#!/bin/bash

# LDMS_ENTITY is one of ldmsd, meminfo, vmstat, geminfo, procinterrupts, procpidstatic, procstat, ldmsmon
# ACTION is one of start, stop, resume, remove
# SOCKET is the port to be used for communication with ldmsd
# PERIOD is the number of micro-seconds between collection
# COMP_ID is the component identifier that will be asociated with this metric set (should be the same for same host)
# LDMS_EXE_PATH path to the ldms executables as seen from the host being collected on

LDMS_ENTITY=$1
ACTION=$2
SOCKET=$3
PERIOD=$4
COMP_ID=$5
LDMS_LIB_PATH=$6
LDMS_EXE_PATH=$7
LDMS_LOG_PATH=$8
LDMS_TRANSPORT=$9

echo "export LDMS_ENTITY=$LDMS_ENTITY"
echo "export SOCKET=$SOCKET"
echo "export PERIOD=$PERIOD"
echo "export COMP_ID=$COMP_ID"
echo "export LDMS_TRANSPORT=$LDMS_TRANSPORT"
echo "export LDMS_EXE_PATH=$LDMS_EXE_PATH"
#PAPI_LIBS=/home/brandt/ldms-async/papi-4.2_build/lib/
echo "export LD_LIBRARY_PATH=$LDMS_LIB_PATH:/home/brandt/ldms-async/papi-4.2_build/lib/"
export LD_LIBRARY_PATH=$LDMS_LIB_PATH:/home/brandt/ldms-async/papi-4.2_build/lib/
#export LD_LIBRARY_PATH=$LDMS_LIB_PATH:$PAPI_LIBS
echo "export LDMS_XPRT_LIBPATH=$LDMS_LIB_PATH"
export LDMS_XPRT_LIBPATH=$LDMS_LIB_PATH
echo "export LDMS_PLUGIN_LIBPATH=$LDMS_LIB_PATH"
export LDMS_PLUGIN_LIBPATH=$LDMS_LIB_PATH
echo "LD_LIBRARY_PATH = $LD_LIBRARY_PATH"
METRIC_SOCKET=metric_socket_$COMP_ID

if [[ $LDMS_ENTITY = "ldmsd" ]]; then
   if [[ $ACTION = "start" ]]; then
#      killall ldmsctl
      mkdir -p /var/run/ldmsd
      mkdir -p /var/run/ldmsctl
#      rm /var/run/ldmsd/*
#      rm /var/run/ldmsctl/*
      if [[ $LDMS_TRANSPORT = "sock" ]]; then
	echo "$LDMS_EXE_PATH/ldmsd -x $LDMS_TRANSPORT:$SOCKET -i $PERIOD -H ${HOSTNAME}_${COMP_ID} -S /var/run/ldmsd/metric_socket_$COMP_ID -l $LDMS_LOG_PATH/ldms.log > /dev/null 2>&1"
	$LDMS_EXE_PATH/ldmsd -x $LDMS_TRANSPORT:$SOCKET -i $PERIOD -H ${HOSTNAME}_${COMP_ID} -S /var/run/ldmsd/metric_socket_$COMP_ID -l $LDMS_LOG_PATH/ldms.log > /dev/null 2>&1 
      elif [[ $LDMS_TRANSPORT = "rdma" ]]; then
	$LDMS_EXE_PATH/ldmsd -x $LDMS_TRANSPORT:$SOCKET -i $PERIOD -H ${HOSTNAME}_${COMP_ID} -S /var/run/ldmsd/metric_socket_$COMP_ID -l $LDMS_LOG_PATH/ldms.log > /dev/null 2>&1 &
      fi
   elif [[ $ACTION = "stop" ]]; then
	killall ldmsctl
	killall ldmsd
#	rm /var/run/ldmsctl/*
   else
	continue
   fi

elif [[ $LDMS_ENTITY = "meminfo" ]]; then
   if [[ $ACTION = "start" ]]; then
	echo load meminfo | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
	echo init meminfo meminfo | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
	echo config meminfo component_id $COMP_ID | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
	echo start meminfo $PERIOD | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   elif [[ $ACTION = "stop" ]]; then
	echo stop meminfo | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   elif [[ $ACTION = "resume" ]]; then
	echo start meminfo $PERIOD | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   elif [[ $ACTION = "remove" ]]; then
	echo term meminfo | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   else
	continue
   fi

elif [[ $LDMS_ENTITY = "ldmsmon" ]]; then
   if [[ $ACTION = "start" ]]; then
	echo load ldmsmon | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
	echo init ldmsmon ldmsmon | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
	echo config ldmsmon component_id $COMP_ID | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
	echo start ldmsmon $PERIOD | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   elif [[ $ACTION = "stop" ]]; then
	echo stop ldmsmon | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   elif [[ $ACTION = "resume" ]]; then
	echo start ldmsmon $PERIOD | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   elif [[ $ACTION = "remove" ]]; then
	echo term ldmsmon | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   else
	continue
   fi

elif [[ $LDMS_ENTITY = "geminfo" ]]; then
   if [[ $ACTION = "start" ]]; then
	echo load geminfo | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
	echo init geminfo geminfo | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
	echo config geminfo component_id $COMP_ID | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
	echo start geminfo $PERIOD | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   elif [[ $ACTION = "stop" ]]; then
	echo stop geminfo | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   elif [[ $ACTION = "resume" ]]; then
	echo start geminfo $PERIOD | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   elif [[ $ACTION = "remove" ]]; then
	echo term geminfo | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   else
	continue
   fi

elif [[ $LDMS_ENTITY = "perf_event" ]]; then
   if [[ $ACTION = "start" ]]; then
	echo load perf_event | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
	echo init perf_event perf_event | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
	echo config perf_event component_id $COMP_ID | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
	echo start perf_event $PERIOD | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   elif [[ $ACTION = "stop" ]]; then
	echo stop perf_event | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   elif [[ $ACTION = "resume" ]]; then
	echo start perf_event $PERIOD | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   elif [[ $ACTION = "remove" ]]; then
	echo term perf_event | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   else
	continue
   fi

elif [[ $LDMS_ENTITY = "procinterrupts" ]]; then
   if [[ $ACTION = "start" ]]; then
	echo load procinterrupts | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
	echo init procinterrupts procinterrupts | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
	echo config procinterrupts component_id $COMP_ID | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
	echo start procinterrupts $PERIOD | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   elif [[ $ACTION = "stop" ]]; then
	echo stop procinterrupts | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   elif [[ $ACTION = "resume" ]]; then
	echo start procinterrupts $PERIOD | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   elif [[ $ACTION = "remove" ]]; then
	echo term procinterrupts | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   else
	continue
   fi

elif [[ $LDMS_ENTITY = "procpidstatic" ]]; then
   if [[ $ACTION = "start" ]]; then
	echo load procpidstatic | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
	echo init procpidstatic procpidstatic | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
	echo config procpidstatic component_id $COMP_ID | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
	echo start procpidstatic $PERIOD | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   elif [[ $ACTION = "stop" ]]; then
	echo stop procpidstatic | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   elif [[ $ACTION = "resume" ]]; then
	echo start procpidstatic $PERIOD | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   elif [[ $ACTION = "remove" ]]; then
	echo term procpidstatic | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   else
	continue
   fi

elif [[ $LDMS_ENTITY = "procstat" ]]; then
   if [[ $ACTION = "start" ]]; then
	echo load procstat | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
	echo init procstat procstat | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
	echo config procstat component_id $COMP_ID | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
	echo start procstat $PERIOD | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   elif [[ $ACTION = "stop" ]]; then
	echo stop procstat | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   elif [[ $ACTION = "resume" ]]; then
	echo start procstat $PERIOD | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   elif [[ $ACTION = "remove" ]]; then
	echo term procstat | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   else
	continue
   fi

elif [[ $LDMS_ENTITY = "vmstat" ]]; then
   if [[ $ACTION = "start" ]]; then
	echo load vmstat | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
	echo init vmstat vmstat | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
	echo config vmstat component_id $COMP_ID | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
	echo start vmstat $PERIOD | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   elif [[ $ACTION = "stop" ]]; then
	echo stop vmstat | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   elif [[ $ACTION = "resume" ]]; then
	echo start vmstat $PERIOD | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   elif [[ $ACTION = "remove" ]]; then
	echo term vmstat | $LDMS_EXE_PATH/ldmsctl -S/var/run/ldmsd/$METRIC_SOCKET
   else
	continue
   fi

else
	exit

fi
