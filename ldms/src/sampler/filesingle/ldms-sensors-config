#! /usr/bin/env python2
# $0: sensors_bin_path
# Run sensors under strace to discover where sensor files
# live on the current system and generate a draft file.
import warnings
import sys
import os.path
import tempfile
import subprocess
import argparse

def fixlabel(s, nodash=False):
    if s[-2:] == "\\n":
        s = s[:-2]
    s = s.replace(" ", "_")
    if nodash:
        s = s.replace("-", "_")
    return s

ignore_types = [
    "crit",
    "alarm",
    "hyst",
]

def main():
    opts = argparse.ArgumentParser(
            description="Generate filesingle metric list")
    opts.add_argument("--sensors", metavar="SENSORS-PATH",
            default="/usr/bin/sensors",
            help="Full path to lm_sensor 'sensors' program")
    opts.add_argument("--lscpu", metavar="LSCPU-PATH", default="/usr/bin/lscpu",
            help="Full path to 'lscpu' program")
    opts.add_argument("--nodash", default=False, action='store_true',
            help="enable replacing - with _ in names.")
    opts.add_argument("--test-lscpu", metavar="TEST-INPUT", required=False,
            help="path to strace result file for parser testing")
    opts.add_argument("--test-sensors", metavar="TEST-INPUT", required=False,
            help="path to strace result file for parser testing")

    args = opts.parse_args()
    if args.test_sensors != None:
        if not os.path.isfile(args.test_sensors):
            print "missing", args.test_sensors, ". specify a trace log."
            return 1
    else:
        if not os.path.isfile(args.sensors):
            print "missing", args.sensors, ". Need --sensors=<progpath>"
            return 1
    if args.test_lscpu != None:
        if not os.path.isfile(args.test_lscpu):
            print "missing", args.test_lscpu, ". specify a trace log."
            return 1
    else:
        if not os.path.isfile(args.lscpu):
            print "missing", args.lscpu, ". Need --lscpu=<progpath>"
            return 1

    sensorsbin = args.sensors
    lscpubin = args.lscpu
    nodash = args.nodash

    # build and parse sensors trace
    tf = tempfile.mktemp(dir="/tmp", suffix=".trace", prefix="ldms-config-sensors.")
    if args.test_sensors != None:
        tf = args.test_sensors
    else:
        cmd = "script -c 'strace -e trace=openat,open,read " + \
                sensorsbin + " -u' " + tf + " > /dev/null"
        trval = subprocess.call(cmd, shell=True)
        if trval != 0:
            print "Unable to collect sensors config output"
            return 1
    f = open(tf)
    lines = f.readlines()
    f.close()
    if args.test_sensors == None:
        os.unlink(tf)
    lastopen = None
    lastread = None
    lastfile = None
    lastfiletype = None
    lastgroup = None
    devices = dict(); # nested dict
    # devices[devpath][item]["label"]
    # devices[devpath][item]["inputfile"]
    # devices[devpath]["name"]
    # where devpath is like /sys/class/hwmon/hwmon0
    # item is like temp1
    # and we compose metric names as:
    # ".".join([devices[devpath]["name"], devices[devpath][item]["label"]])
    for lf in lines:
        l = lf.strip()
        if len(l) < 5:
            continue
        if "openat(" == l[:7]:
            ## print "OPENAT", l
            tmp = l.split(',')[1].strip().strip('"')
            if tmp[:11] == '/sys/class/':
                lastfile = tmp
                if tmp[-5:] == "/name":
                    lastdevice = os.path.dirname(tmp)
                    ## print "DEVICE", lastdevice
                    devices[lastdevice] = dict()
                    # devices[lastdevice]["namefile"] = tmp
                    devices[lastdevice]["items"] = []
                    lastfiletype = "name"
                else:
                    suff = tmp.split('_')[-1]
                    lastfiletype = suff
                ## print "lastfiletype", lastfiletype, tmp
            else:
                lastfile = None
                lastfiletype = None
                lastdevice = None
            continue
        if "open(" == l[:5]:
            ## print "OPEN", l
            tmp = l.split(',')[0].split("(")[1].strip().strip('"')
            if tmp[:11] == '/sys/class/':
                lastfile = tmp
                if tmp[-5:] == "/name":
                    lastdevice = os.path.dirname(tmp)
                    ## print "DEVICE", lastdevice
                    devices[lastdevice] = dict()
                    # devices[lastdevice]["namefile"] = tmp
                    devices[lastdevice]["items"] = []
                    lastfiletype = "name"
                else:
                    suff = tmp.split('_')[-1]
                    lastfiletype = suff
                ## print "lastfiletype", lastfiletype, tmp
            else:
                lastfile = None
                lastfiletype = None
                lastdevice = None
            continue
        if "read(" == l[:5]:
            ## print "READ", l
            tmp = l.split(',')[1].strip().strip('"')
            if len(tmp) == 0:
                continue
            if lastfiletype is None:
                ## print "skip: no lastfiletype"
                continue
            if lastfiletype == "name":
                devices[lastdevice]['name'] = fixlabel(tmp)
                ## print "dev name", tmp
                continue
            if lastfiletype == "label":
                lastdevice = os.path.dirname(lastfile)
                bn = os.path.basename(lastfile)
                split = bn.rfind("_")
                item = bn[:split]
                if not "group" in devices[lastdevice]:
                    devices[lastdevice]["group"] = lastgroup
                if not item in devices[lastdevice]["items"]:
                    devices[lastdevice]["items"].append(item)
                    devices[lastdevice][item] = dict()
                    devices[lastdevice][item]["label"] = fixlabel(tmp)
                ## print "dev LABEL", item, tmp
                continue
            if lastfiletype == "input" or lastfiletype == "average":
                lastdevice = os.path.dirname(lastfile)
                bn = os.path.basename(lastfile)
                split = bn.rfind("_")
                item = bn[:split]
                if not "group" in devices[lastdevice]:
                    devices[lastdevice]["group"] = lastgroup
                if not item in devices[lastdevice]["items"]:
                    devices[lastdevice]["items"].append(item)
                    devices[lastdevice]["group"] = lastgroup
                    devices[lastdevice][item] = dict()
                    devices[lastdevice][item]["label"] = fixlabel(item)
                devices[lastdevice][item]["inputfile"] = lastfile
                ## print "dev FILE", item, tmp
                continue
            if lastfiletype in ignore_types:
                continue
            continue
        if l.find(":") == -1:
            lastgroup = l

    for k,d in devices.iteritems():
        if len(d["items"]) > 0:
            for i in d["items"]:
                ilbl = fixlabel(".".join([d["group"], d[i]["label"] ]), nodash)
                print ilbl, d[i]["inputfile"], "S64 -1"

    devices = dict()
    # build and parse lscpu trace
    if args.test_lscpu != None:
        atf = args.test_lscpu
    else:
        tf = tempfile.mktemp(dir="/tmp", suffix=".trace",
                prefix="ldms-config-sensors.")
        atf = tf + "a"
        cmd = "script -c 'strace -e trace=open,openat " + \
            lscpubin + "' " + tf + "> /dev/null; grep cpuinfo_max_freq " + \
            tf + " > " + atf
        trval = subprocess.call(cmd, shell=True)
        if trval != 0:
            print "#Unable to collect lscpu config output"
            return 1
    f = open(atf)
    lines = f.readlines()
    f.close()
    if args.test_lscpu == None:
        os.unlink(tf)
        os.unlink(atf)
    for lf in lines:
        l = lf.strip()
        if len(l) < 5:
            continue
        if "openat(" == l[:7]:
            ## print "OPENAT", l
            tmp = l.split('"')[1]
            metfile = tmp.replace("max_fr", "cur_fr")
            parts = tmp.split("/")
            device = parts[-3]
            item = "cur_freq"
            if not device in devices:
                devices[device] = dict()
            if not "items" in devices[device]:
                devices[device]["items"] = []
                devices[device]["group"] = device
            devices[device]["items"].append(item)
            devices[device][item] = dict()
            devices[device][item]["label"] = "cur_freq"
            devices[device][item]["inputfile"] = metfile
        elif "open(" == l[:5]:
            ## print "OPEN", l
            tmp = l.split('"')[1]
            metfile = tmp.replace("max_fr", "cur_fr")
            parts = tmp.split("/")
            device = parts[-3]
            item = "cur_freq"
            if not device in devices:
                devices[device] = dict()
            if not "items" in devices[device]:
                devices[device]["items"] = []
                devices[device]["group"] = device
            devices[device]["items"].append(item)
            devices[device][item] = dict()
            devices[device][item]["label"] = "cur_freq"
            devices[device][item]["inputfile"] = metfile
        else:
            print "unexpected line from lscpu trace:" + l

    # cpu temps reported in millicentigrade
    # intel power averages in microwatts, apparently
    # cpu freq reported in milliHz
    llist=[]
    for k,d in devices.iteritems():
        if len(d["items"]) > 0:
            for i in d["items"]:
                ilbl = fixlabel(".".join([d["group"], d[i]["label"] ]), nodash)
                ln = ilbl + " " + d[i]["inputfile"] + " " + "S64 -1"
                llist.append(ln)
    for i in sorted(llist):
        print i

if __name__ == "__main__":
    main()

