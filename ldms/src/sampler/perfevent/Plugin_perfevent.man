.\" Manpage for Plugin_perfevent
.\" Contact ovis-help@ca.sandia.gov to correct errors or typos.
.TH man 7 "18 Feb 2018" "v4" "LDMS Plugin perfevent man page"

.SH NAME
Plugin_perfevent - man page for the LDMS perfevent sampler plugin.

.SH SYNOPSIS

Within ldmsctl
.br
ldmsctl> config name=perfevent [ <attr>=<value> ]

.SH DESCRIPTION
With LDMS (Lightweight Distributed Metric Service), plugins for the ldmsd (ldms daemon) are configured via ldmsd_controller or a configuration file.
The perfevent sampler plugin runs on the nodes and provides data about the the occurrence of micro-architectural events using linux perfevent subsystem by accessing hardware performance counters.

.SH ENVIRONMENT

You will need to build LDMS with --enable-perfevent. Perfevent subsystem is available since Linux 2.6.31.

.SH CONFIGURATION ATTRIBUTE SYNTAX
The perfevent plugin uses the sampler_base base class. This man page covers only the configuration attributes, or those with default values, specific to the this plugin. See ldms_sampler_base.man for the attributes of the base class; those attributes are specified as part of the 'init' action arguments.

.TP
.BR config

name=<plugin_name> action<action_name> [schema=<sname>]
.br
configuration line
.RS
.TP
name=<plugin_name>
.br
This MUST be perfevent.
.TP
schema=<schema>
.br
Optional schema name. It is intended that the same sampler on different nodes with different metrics have a different schema.
.TP
action=init
.br
Perform initialization
.TP
action=del metricname=<string>
.br
Deletes the specified event.
.TP
action=ls
.br
List the currently configured events.
.TP
action=add metricname=<string> pid=<int> cpu=<int> type=<int> id=<int>
.br
Adds a metric to the list of configured events.
.br
metricname
.br
	The metric name for the event
.br
pid
.br
	The PID for the process being monitored. The counter will follow the process to whichever CPU/core is in use. Note that 'pid' and 'cpu' are mutually exclusive.
.br
cpu
.br
	Count this event on the specified CPU. This will accumulate events across all PID that land on the specified CPU/core. Note that 'pid' and 'cpu' are mutually exclusive.
.br
type
.br
	The event type.
.br
id
.br
	The event id.

.TP

The pid and cpu arguments allow specifying which process and CPU to monitor:
.br
pid == 0 and cpu == -1
.br
	This measures the calling process/thread on any CPU.
.br
pid == 0 and cpu >= 0
.br
	This measures the calling process/thread only when running on the specified CPU.
.br
pid > 0 and cpu == -1
.br
	This measures the specified process/thread on any CPU.
.br
pid > 0 and cpu >= 0
.br
	This measures the specified process/thread only when running on the specified CPU.
.br
pid == -1 and cpu >= 0
.br
	This measures all processes/threads on the specified CPU. This requires CAP_SYS_ADMIN capability or a /proc/sys/kernel/perf_event_paranoid value of less than 1.
.br
pid == -1 and cpu == -1
.br
	This setting is invalid and will return an error.
.TP
For more information visit: http://man7.org/linux/man-pages/man2/perf_event_open.2.html

.TP
.BR type
.br
This field specifies the overall event type.  It has one of the following values:
.br
	      PERF_TYPE_HARDWARE
.br
.br
		     This indicates one of the "generalized" hardware events provided by the kernel.  See the id field definition for more details.
.br
	      PERF_TYPE_SOFTWARE
.br
.br
		     This indicates one of the software-defined events provided by the kernel (even if no hardware support is available).
.br
	      PERF_TYPE_TRACEPOINT
.br
.br
		     This indicates a tracepoint provided by the kernel tracepoint infrastructure.
.br
	      PERF_TYPE_HW_CACHE
.br
.br
		     This indicates a hardware cache event.  This has a special encoding, described in the id field definition.
.br
	      PERF_TYPE_RAW
.br
.br
		     This indicates a "raw" implementation-specific event in the id field.
.br
	      PERF_TYPE_BREAKPOINT (since Linux 2.6.33)
.br
.br
		     This indicates a hardware breakpoint as provided by the CPU.  Breakpoints can be read/write accesses to an address as well as execution of an instruction address.
.TP
.BR id
.br
This specifies which event you want, in conjunction with the type field.
.br
There are various ways to set the id field that are dependent on the value of the previously described type field.
.br
What follows are various possible settings for id separated out by type.
.br
If type is PERF_TYPE_HARDWARE, we are measuring one of the generalized hardware CPU events.  Not all of these are available on all platforms.  Set id to one of the following:
.br
		   PERF_COUNT_HW_CPU_CYCLES
.br
			  Total cycles.  Be wary of what happens during CPU frequency scaling.
.br
		   PERF_COUNT_HW_INSTRUCTIONS
.br
			  Retired instructions.  Be careful, these can be affected by various issues, most notably hardware interrupt counts.
.br
		   PERF_COUNT_HW_CACHE_REFERENCES
.br
			  Cache accesses.  Usually this indicates Last Level Cache accesses but this may vary depending on your CPU.  This may include prefetches and coherency messages; again this depends on the design of your  CPU.
.br
		   PERF_COUNT_HW_CACHE_MISSES
.br
			  Cache misses.  Usually this indicates Last Level Cache misses; this is intended to be used in conjunction with the
.br
		    PERF_COUNT_HW_CACHE_REFERENCES
.br
				  event to calculate cache miss rates.
.br
		   PERF_COUNT_HW_BRANCH_INSTRUCTIONS
.br
			  Retired branch instructions.  Prior to Linux 2.6.35, this used the wrong event on AMD processors.
.br
		   PERF_COUNT_HW_BRANCH_MISSES
.br
			  Mispredicted branch instructions.
.br
		   PERF_COUNT_HW_BUS_CYCLES
.br
			  Bus cycles, which can be different from total cycles.
.br
		   PERF_COUNT_HW_STALLED_CYCLES_FRONTEND (since Linux 3.0)
.br
			  Stalled cycles during issue.
.br
		   PERF_COUNT_HW_STALLED_CYCLES_BACKEND (since Linux 3.0)
.br
			  Stalled cycles during retirement.

		   PERF_COUNT_HW_REF_CPU_CYCLES (since Linux 3.3)
.br
			  Total cycles; not affected by CPU frequency scaling.
.br
	      If type is PERF_TYPE_SOFTWARE, we are measuring software events provided by the kernel.  Set config to one of the following:
.br
		   PERF_COUNT_SW_CPU_CLOCK
.br
			  This reports the CPU clock, a high-resolution per-CPU timer.
.br
		   PERF_COUNT_SW_TASK_CLOCK
.br
			  This reports a clock count specific to the task that is running.
.br
		   PERF_COUNT_SW_PAGE_FAULTS
.br
			  This reports the number of page faults.
.br
		   PERF_COUNT_SW_CONTEXT_SWITCHES
.br
			  This counts context switches.  Until Linux 2.6.34, these were all reported as user-space events, after that they are reported as happening in the kernel.
.br
		   PERF_COUNT_SW_CPU_MIGRATIONS
.br
			  This reports the number of times the process has migrated to a new CPU.
.br
		   PERF_COUNT_SW_PAGE_FAULTS_MIN
.br
			  This counts the number of minor page faults. These did not require disk I/O to handle.
.br
		   PERF_COUNT_SW_PAGE_FAULTS_MAJ
.br
			  This counts the number of major page faults. These required disk I/O to handle.
.br
		   PERF_COUNT_SW_ALIGNMENT_FAULTS (since Linux 2.6.33)
.br
			  This counts the number of alignment faults.  These happen when unaligned memory accesses happen; the kernel can handle these but it reduces performance.  This happens only on some architectures (never on x86).
.br
		   PERF_COUNT_SW_EMULATION_FAULTS (since Linux 2.6.33)
.br
			  This counts the number of emulation faults.  The kernel sometimes traps on unimplemented instructions and emulates them for user space. This can negatively impact performance.
.br
		   PERF_COUNT_SW_DUMMY (since Linux 3.12)
.br
			  This is a placeholder event that counts nothing. Informational sample record types such as mmap or comm must be associated with an active event. This dummy event allows gathering such records without requiring a counting event.
.br
	      If type is PERF_TYPE_TRACEPOINT, then we are measuring kernel  tracepoints.  The value to use in id can be obtained from  under debugfs tracing/events/*/*/id if ftrace is enabled in the kernel.
.br
	      If type is PERF_TYPE_HW_CACHE, then we are measuring a hardware CPU cache event.  To calculate the appropriate id value use the following equation:
.br
		      (perf_hw_cache_id) | (perf_hw_cache_op_id << 8) | (perf_hw_cache_op_result_id << 16)
.br
		  where perf_hw_cache_id is one of:
.br
		      PERF_COUNT_HW_CACHE_L1D
.br
			     for measuring Level 1 Data Cache
.br
		      PERF_COUNT_HW_CACHE_L1I
.br
			     for measuring Level 1 Instruction Cache
.br
		      PERF_COUNT_HW_CACHE_LL
.br
			     for measuring Last-Level Cache
.br
		      PERF_COUNT_HW_CACHE_DTLB
.br
			     for measuring the Data TLB
.br
		      PERF_COUNT_HW_CACHE_ITLB
.br
			     for measuring the Instruction TLB
.br
		      PERF_COUNT_HW_CACHE_BPU
.br
			     for measuring the branch prediction unit
.br
		      PERF_COUNT_HW_CACHE_NODE (since Linux 3.1)
.br
			     for measuring local memory accesses
.br
		  and perf_hw_cache_op_id is one of
.br
		      PERF_COUNT_HW_CACHE_OP_READ
.br
			     for read accesses
.br
		      PERF_COUNT_HW_CACHE_OP_WRITE
.br
			     for write accesses
.br
		      PERF_COUNT_HW_CACHE_OP_PREFETCH
.br
			     for prefetch accesses and perf_hw_cache_op_result_id is one of
.br
		      PERF_COUNT_HW_CACHE_RESULT_ACCESS
.br
			     to measure accesses
.br
		      PERF_COUNT_HW_CACHE_RESULT_MISS
.br
			     to measure misses
.br
	      If type is PERF_TYPE_RAW, then a custom "raw" id value is needed.  Most CPUs support events that are not covered by the
	      "generalized" events.  These are implementation defined; see your CPU manual (for example the Intel Volume 3B documentation or the AMD BIOS and Kernel Developer Guide).  The libpfm4 library can be used to translate from the name in the architectural manuals to the raw hex value perf_event_open()
	      expects in this field.


.RE

.SH NOTES
.PP
The official way of knowing if perf_event_open() support is enabled
       is checking for the existence of the file
       /proc/sys/kernel/perf_event_paranoid.

.PP
The enum values for type and id are specified in kernel. Here are the values in version 3.9 (retrieved from http://lxr.cpsc.ucalgary.ca/lxr/linux+v3.9/include/uapi/linux/perf_event.h#L28):

.PP
 enum perf_type_id {
	  PERF_TYPE_HARDWARE                      = 0,
	  PERF_TYPE_SOFTWARE                      = 1,
	  PERF_TYPE_TRACEPOINT                    = 2,
	  PERF_TYPE_HW_CACHE                      = 3,
	  PERF_TYPE_RAW                           = 4,
	  PERF_TYPE_BREAKPOINT                    = 5,

	  PERF_TYPE_MAX,                          /* non-ABI */
  };
.PP
enum perf_hw_id {
	  /*
	   * Common hardware events, generalized by the kernel:
	   */
	  PERF_COUNT_HW_CPU_CYCLES                = 0,
	  PERF_COUNT_HW_INSTRUCTIONS              = 1,
	  PERF_COUNT_HW_CACHE_REFERENCES          = 2,
	  PERF_COUNT_HW_CACHE_MISSES              = 3,
	  PERF_COUNT_HW_BRANCH_INSTRUCTIONS       = 4,
	  PERF_COUNT_HW_BRANCH_MISSES             = 5,
	  PERF_COUNT_HW_BUS_CYCLES                = 6,
	  PERF_COUNT_HW_STALLED_CYCLES_FRONTEND   = 7,
	  PERF_COUNT_HW_STALLED_CYCLES_BACKEND    = 8,
	  PERF_COUNT_HW_REF_CPU_CYCLES            = 9,

	  PERF_COUNT_HW_MAX,                      /* non-ABI */
  };
.PP
 /*
   * Generalized hardware cache events:
   *
   *       { L1-D, L1-I, LLC, ITLB, DTLB, BPU, NODE } x
   *       { read, write, prefetch } x
   *       { accesses, misses }
   */
  enum perf_hw_cache_id {
	  PERF_COUNT_HW_CACHE_L1D                 = 0,
	  PERF_COUNT_HW_CACHE_L1I                 = 1,
	  PERF_COUNT_HW_CACHE_LL                  = 2,
	  PERF_COUNT_HW_CACHE_DTLB                = 3,
	  PERF_COUNT_HW_CACHE_ITLB                = 4,
	  PERF_COUNT_HW_CACHE_BPU                 = 5,
	  PERF_COUNT_HW_CACHE_NODE                = 6,

	  PERF_COUNT_HW_CACHE_MAX,                /* non-ABI */
  };
  enum perf_hw_cache_op_id {
	  PERF_COUNT_HW_CACHE_OP_READ             = 0,
	  PERF_COUNT_HW_CACHE_OP_WRITE            = 1,
	  PERF_COUNT_HW_CACHE_OP_PREFETCH         = 2,

	  PERF_COUNT_HW_CACHE_OP_MAX,             /* non-ABI */
  };

  enum perf_hw_cache_op_result_id {
	  PERF_COUNT_HW_CACHE_RESULT_ACCESS       = 0,
	  PERF_COUNT_HW_CACHE_RESULT_MISS         = 1,

	  PERF_COUNT_HW_CACHE_RESULT_MAX,         /* non-ABI */
  };
.PP
/*
   * Special "software" events provided by the kernel, even if the hardware
* does not support performance events. These events measure various
   * physical and sw events of the kernel (and allow the profiling of them as
  * well):
  */
 enum perf_sw_ids {
	 PERF_COUNT_SW_CPU_CLOCK                 = 0,
	 PERF_COUNT_SW_TASK_CLOCK                = 1,
	 PERF_COUNT_SW_PAGE_FAULTS               = 2,
	 PERF_COUNT_SW_CONTEXT_SWITCHES          = 3,
	 PERF_COUNT_SW_CPU_MIGRATIONS            = 4,
	 PERF_COUNT_SW_PAGE_FAULTS_MIN           = 5,
	PERF_COUNT_SW_PAGE_FAULTS_MAJ           = 6,
	 PERF_COUNT_SW_ALIGNMENT_FAULTS          = 7,
	PERF_COUNT_SW_EMULATION_FAULTS          = 8,

	 PERF_COUNT_SW_MAX,                      /* non-ABI */
 };

.SH BUGS
No known bugs.

.SH EXAMPLES
.PP
.TP
The following is a short example that measures 4 events.
.br
Total CPU cycles
.br
Total CPU instructions
.br
Total branch instructions
.br
Mispredicted branch instructions

.PP

IF we set the value of PID=1234 and CPU_NUM is -1, this measures the process with pid=1234 on any CPU. If the CPU_NUM is 1, this measures the process with pid=1234 only on CPU 1.
.br
IF we set the value of PID=-1 and CPU_NUM is 1, this measures all processes/threads on the CPU number 1. This requires CAP_SYS_ADMIN capability or a  /proc/sys/kernel/perf_event_paranoid value of less than 1.


$ldmsctl -S $LDMSD_SOCKPATH


ldmsctl> load name=perfevent
.br
ldmsctl> config name=perfevent action=add metricname="PERF_COUNT_HW_CPU_CYCLES" pid=$PID cpu=$CPU_NUM type=0 id=0
.br
ldmsctl> config name=perfevent action=add metricname="PERF_COUNT_HW_INSTRUCTIONS" pid=$PID cpu=$CPU_NUM type=0 id=1
.br
ldmsctl> config name=perfevent action=add metricname="PERF_COUNT_HW_BRANCH_INSTRUCTIONS" pid=$PID cpu=$CPU_NUM type=0 id=4
.br
ldmsctl> config name=perfevent action=add metricname="PERF_COUNT_HW_BRANCH_MISSES" pid=$PID cpu=$CPU_NUM type=0 id=5
.br
ldmsctl> config name=perfevent action=init instance=$INSTANCE_NAME producer=$PRODUCER_NAME
.br
ldmsctl> start name=perfevent interval=$INTERVAL_VALUE
.br
ldmsctl> quit




.SH SEE ALSO

PERF_EVENT_OPEN(2), ldmsd(7), ldms_quickstart(7), ldms_sampler_base(7)
