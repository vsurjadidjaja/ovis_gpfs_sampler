#!/bin/bash
# test sampler/agg/l2agg configuration
# NOTE: replace the two vars below with your paths
# NOTE: change ports, intervals, samplers, stores if you like
DESTDIR=
allowroot=0
prefix=@prefix@
exec_prefix=@exec_prefix@
libdir=@libdir@
export PYTHONPATH=@pythondir@
source ${libdir}/ovis-lib-configvars.sh
source ${libdir}/ovis-ldms-configvars.sh
BUILDDIR=$ovis_ldms_prefix
# Manually redefine portbase to avoid collisions.
# Base should be above the maximum in :
#  cat /proc/sys/net/ipv4/ip_local_port_range
# and below 65530 or below the minimum and above 1024
portbase=61100
port1=`expr $portbase + 1`
port2=`expr $portbase + 2`
port4=`expr $portbase + 4`
if test ! -x $BUILDDIR/sbin/ldmsd; then
	echo "can't find ldmsd binary. set destdir in $0 before testing?"
	exit 1
fi


case "x$USER" in
	x)
	echo "must be run in user environment. USER not set"
	exit 1
	;;
	xroot)
	echo "must be run in user environment. root detected."
	echo "killing other folks ldmsd might be a bad idea"
	echo "change allowroot in $0 to override this check."
	exit 1
	;;
esac

function mysleep() {
	echo -n sleep $1 ...
	sleep $1
	echo done
}

function die () {
	if test $1 = 0; then
		return 0
	else
		echo FAIL $1 before line ${BASH_LINENO[0]}
		exit $1
	fi
}


# use our pid in dirname to prevent collisions in dir & file naming
TESTDIR=/tmp/$USER/ldmstest/$$
STOREDIR=$TESTDIR/store
SOCKDIR=$TESTDIR/run/ldmsd
in1=$SOCKDIR/in1
in2=$SOCKDIR/in2
in4=$SOCKDIR/in4
LOGDIR=$TESTDIR/logs
export LDMSD_PIDFILE=$TESTDIR/run/ldmsd.pid
export LDMSD_SOCKPATH=${TESTDIR}/run
mkdir -p $STOREDIR $SOCKDIR $LOGDIR $LDMSD_SOCKPATH
SECRET=$SOCKDIR/secret
echo "secretword=crashtestdummy" > $SECRET
export LDMS_AUTH_FILE=$SECRET
chmod go-rwx $SECRET
if test ! -x $BUILDDIR/bin/ldmsd_controller; then
	echo "can't find ldmsd_controller script. Included python in build?"
	exit 1
else
	# tcp style
	LC="$prefix/bin/ldmsd_controller --xprt sock --host localhost --auth ovis"
	CPO="--port"

fi
echo "logs and data stored under $TESTDIR"
export LD_LIBRARY_PATH=${ovis_ldms_plugins_rpath}:$ovis_ldms_libdir:$ovis_ldms_pkglibdir:$LD_LIBRARY_PATH
export ZAP_LIBPATH=$ovis_ldms_pkglibdir
export PATH=${BUILDDIR}/sbin:$PATH
export LDMSD_PLUGIN_LIBPATH=$ovis_ldms_pkglibdir

# whack the daemons we own; possibly bad if running as root!!
pkill ldmsd
mysleep 1
echo "Listing ldmsd's still running:"
pgrep ldmsd
echo "Done."

echo removing old logs
rm -f ${LOGDIR}/1.txt
rm -f ${LOGDIR}/2.txt
rm -f ${LOGDIR}/4.txt

echo removing old output
rm -rf ${STOREDIR}/node
rm -f ${STOREDIR}/*


jobfile=$SOCKDIR/jobdata.1
cat << EOF > $jobfile
JOBID=1
UID=$UID
USER=$USER
APPID=5551212
EOF

echo Starting plugins on daemon1
cat << EOF > $in1
load name=jobid
config name=jobid producer=localhost1 instance=localhost1/jobid component_id=3 file=$jobfile
start name=jobid interval=1000000 offset=0

load name=meminfo
config name=meminfo producer=localhost1 instance=localhost1/meminfo schema=meminfo component_id=3 job_set=localhost1/jobid
start name=meminfo interval=1000000 offset=0
EOF

# is conn retry interval in sec or u-sec? man not specific.
ARI=1000000

echo Adding host1 to aggregator2
cat << EOF  > $in2
prdcr_add name=localhost1 host=localhost type=active xprt=sock interval=$ARI port=$port1
prdcr_start name=localhost1

updtr_add name=localhost1 interval=1000000 offset=10000
updtr_prdcr_add name=localhost1 regex=localhost1
updtr_start name=localhost1

EOF

echo Adding host2 to aggregator4
cat << EOF  > $in4
prdcr_add name=localhost2 host=localhost type=active xprt=sock interval=$ARI port=$port2
prdcr_start name=localhost2

updtr_add name=localhost2 interval=1000000 offset=10000
updtr_prdcr_add name=localhost2 regex=.*
updtr_start name=localhost2

load name=store_csv
config name=store_csv action=init path=${STOREDIR}

strgp_add name=sfjob plugin=store_csv schema=jobid container=csv
strgp_prdcr_add name=sfjob regex=.*
strgp_start name=sfjob regex=.*

strgp_add name=sfmem plugin=store_csv schema=meminfo container=csv
strgp_prdcr_add name=sfmem regex=.*
strgp_start name=sfmem regex=.*
EOF

echo Starting daemons 
ldmsd -x sock:$port1 -a ovis -A conf=$SECRET -c $in1 -l ${LOGDIR}/1.txt -v DEBUG -r $TESTDIR/run/ldmsd.pid.1
die $?

ldmsd -x sock:$port2 -a ovis -A conf=$SECRET -c $in2 -l ${LOGDIR}/2.txt -v DEBUG -r $TESTDIR/run/ldmsd.pid.2
die $?

ldmsd -x sock:$port4 -a ovis -A conf=$SECRET -c $in4 -l ${LOGDIR}/4.txt -v DEBUG -r $TESTDIR/run/ldmsd.pid.4
die $?

mysleep 1

echo list host1
echo ldms_ls on host 1:
ldms_ls -a ovis -A conf=$SECRET -h localhost -x sock -p $port1 
echo "11111111111111111111111111111111111111111111111111111111111111"

mysleep 2
echo ldms_ls on host 2:
ldms_ls -a ovis -A conf=$SECRET -h localhost -x sock -p $port2
mysleep 2
echo "done 222222222222222222222222222222222222222222222222222222222"

echo ldms_ls on host 4:
ldms_ls -a ovis -A conf=$SECRET -h localhost -x sock -p $port4
echo "done 333333333333333333333333333333333333333333333333333333333"

mysleep 4

echo quitting
cat << EOF | $LC $CPO $port4
prdcr_stop name=localhost2
updtr_stop name=localhost2
strgp_stop name=sfmem
strgp_stop name=sfjob
strgp_prdcr_del name=sfmem regex=.*
strgp_prdcr_del name=sfjob regex=.*
updtr_prdcr_del name=localhost2 regex=.*
updtr_del name=localhost2
prdcr_del name=localhost2
strgp_del name=sfmem
strgp_del name=sfjob
term name=store_csv

#prdcr_stop_regex regex=.*
#strgp_stop_regex regex=.*
#strgp_del_regex regex=.*
#updtr_stop_regex regex=.*
#updtr_del_regex regex=.*
#prdcr_del_regex regex=.*
#term regex=.*
EOF

cat << EOF | $LC $CPO $port1
stop name=meminfo
term name=meminfo
stop name=jobid
term name=jobid
EOF

sleep 1
kill -SIGTERM `cat  $TESTDIR/run/ldmsd.pid.1` `cat  $TESTDIR/run/ldmsd.pid.4` `cat  $TESTDIR/run/ldmsd.pid.2`
echo done;
echo "logs and data stored under $TESTDIR"
rm -f lastlog4
ln -s $LOGDIR/4.txt lastlog4
rm -f lastlog2
ln -s $LOGDIR/2.txt lastlog2
