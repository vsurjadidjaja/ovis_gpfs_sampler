#!/bin/bash
# test event notice delivery to file and fifo
# NOTE: replace the two vars below with your paths
# NOTE: change ports, intervals if you like
DESTDIR=
allowroot=0
prefix=@prefix@
exec_prefix=@exec_prefix@
libdir=@libdir@

if ! test -f $libdir/ovis-lib-configvars.sh; then
	echo "$libdir/ovis-lib-configvars.sh not found"
	exit 1
fi
if ! test -f $libdir/ovis-ldms-configvars.sh; then
	echo "$libdir/ovis-ldms-configvars.sh not found"
	exit 1
fi
. $libdir/ovis-lib-configvars.sh
. $libdir/ovis-ldms-configvars.sh
if test -z "$ZAP_LIBPATH"; then
	ZAP_LIBPATH=$ovis_ldms_plugins
fi
export ZAP_LIBPATH
if test -z "$LDMSD_PLUGIN_LIBPATH"; then
	LDMSD_PLUGIN_LIBPATH=$ovis_ldms_plugins
fi
export LDMSD_PLUGIN_LIBPATH
export LD_LIBRARY_PATH=${BUILDDIR}/lib:${exec_prefix}/lib:$ovis_ldms_plugins:$LD_LIBRARY_PATH

BUILDDIR=@prefix@
export PYTHONPATH=@pythondir@
# Manually redefine portbase to avoid collisions.
# Base should be above the maximum in :
#  cat /proc/sys/net/ipv4/ip_local_port_range
# and below 65530 or below the minimum and above 1024
portbase=61100
port1=`expr $portbase + 1`
port4=`expr $portbase + 4`
if test ! -x $BUILDDIR/sbin/ldmsd; then
	echo "can't find ldmsd binary. set destdir in $0 before testing?"
	exit 1
fi

case "x$USER" in
	x)
	echo "must be run in user environment. USER not set"
	exit 1
	;;
	xroot)
	echo "must be run in user environment. root detected."
	echo "killing other folks ldmsd might be a bad idea"
	echo "change allowroot in $0 to override this check."
	exit 1
	;;
esac
function mysleep() {
	echo -n sleep $1 ... 
	sleep $1
	echo done
}

function die () {
	if test $1 = 0; then
		return 0
	else
		echo FAIL $1 before line ${BASH_LINENO[0]}
		exit $1
	fi
}


# use our pid in dirname to prevent collisions in dir & file naming
TESTDIR=/tmp/$USER/ldmstest/$$
STOREDIR=$TESTDIR/store
SOCKDIR=$TESTDIR/run/ldmsd
LOGDIR=$TESTDIR/logs
export LDMSD_PIDFILE=$TESTDIR/run/ldmsd.pid
#export TSAN_OPTIONS=verbosity=1:log_path=$LOGDIR:strip_path_prefix=$prefix
#export ASAN_OPTIONS=verbosity=1:log_path=$LOGDIR:detect_stack_use_after_return=1:detect_leaks=1:strip_path_prefix=$prefix
export LDMSD_SOCKPATH=${TESTDIR}/run
mkdir -p $STOREDIR $SOCKDIR $LOGDIR $LDMSD_SOCKPATH
SECRET=$SOCKDIR/secret
echo "secretword=crashtestdummy" > $SECRET
export LDMS_AUTH_FILE=$SECRET
chmod go-rwx $SECRET
if test ! -x $BUILDDIR/bin/ldmsd_controller; then
	echo "can't find ldmsd_controller script. Included python in build?"
	exit 1
else
	LC="$BUILDDIR/bin/ldmsd_controller --xprt sock --host localhost -a ovis -A conf=$SECRET"
	CSO="--sockname"
fi
echo "logs and data stored under $TESTDIR"

export PATH=${BUILDDIR}/sbin:$PATH

# whack the daemons we own
pkill ldmsd
mysleep 1
echo "Listing ldmsd's still running:"
pgrep ldmsd
echo "Done."

echo removing old logs
rm -f ${LOGDIR}/1.txt
rm -f ${LOGDIR}/4.txt

echo removing old output
rm -rf ${STOREDIR}/node
rm -f ${STOREDIR}/*

echo Starting daemons
ldmsd -x sock:$port1 -l ${LOGDIR}/1.txt -v DEBUG -r $TESTDIR/run/ldmsd.pid.1 -a ovis -A conf=$SECRET
die $?

ldmsd -x sock:$port4 -l ${LOGDIR}/4.txt -v DEBUG -r $TESTDIR/run/ldmsd.pid.4 -a ovis -A conf=$SECRET
die $?

mysleep 1


echo Starting plugins on daemon1
cat << EOF | $LC --port $port1
load name=meminfo
config name=meminfo producer=localhost1 instance=localhost1/meminfo schema=meminfo component_id=1 max_mc=2 max_csrow=4
start name=meminfo interval=1000000
EOF
die $?

mysleep 2
echo list host1
echo ldms_ls on host 1:
ldms_ls -h localhost -x sock -p $port1 -a ovis -A conf=$SECRET

# is conn retry interval in sec or u-sec? man not specific.
ARI=1000000
echo Adding host1 to aggregator4
cat << EOF  | $LC --port $port4
prdcr_add name=localhost1 host=localhost type=active xprt=sock interval=$ARI port=$port1
prdcr_start name=localhost1
updtr_add name=localhost1 interval=1000000 offset=10000
updtr_prdcr_add name=localhost1 regex=localhost1
updtr_start name=localhost1
EOF
die $?

mysleep 2
for i in 4 ; do
echo Loading store_csv on aggregator$i
echo "load name=store_csv" | $LC --port $port4
die $?
done
mysleep 2
echo Config store_csv on aggregator4
echo "config name=store_csv action=init path=${STOREDIR} altheader=1" | $LC --port $port4
die $?
echo Start store_csv on aggregator4
cat << EOF | $LC --port $port4
strgp_add name=store_csv plugin=store_csv schema=meminfo container=fmeminfo
strgp_prdcr_add name=store_csv regex=localhost1
strgp_metric_add name=store_csv metric=Active
strgp_metric_add name=store_csv metric=MemFree
strgp_metric_add name=store_csv metric=Dirty
strgp_metric_add name=store_csv metric=component_id
strgp_start name=store_csv regex=localhost1
EOF
die $?
mysleep 7
#
echo List aggregator4


echo ldms_ls on host 4:
ldms_ls -h localhost -x sock -p $port4 -a ovis -A conf=$SECRET

sleep 2
echo quitting
echo $LC --port $port4
kill -SIGTERM `cat  $TESTDIR/run/ldmsd.pid.1` `cat  $TESTDIR/run/ldmsd.pid.4`
echo done;
sleep 1
echo "logs and data stored under $TESTDIR"
